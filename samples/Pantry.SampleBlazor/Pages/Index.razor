@page "/"

@using Pantry.Core
@using Microsoft.Extensions.Configuration
@inject IPantryClient _pantryClient
@inject NavigationManager _uriHelper;
@inject IConfiguration _configuration;

<h1>Pantry</h1>

<p>This component demonstrates how to use the Pantry .NET client library.</p>

@if (_baskets is {Count: >0})
{
    <h3>Baskets:</h3>
    <div class="row">
        <div class="col-6">
            <table class="table table-bordered">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var basket in _baskets)
                {
                    <tr>
                        <td>@basket</td>
                        <td>
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => DeleteBasket(basket)">
                                <span class="oi oi-trash"></span>
                            </button>
                            <button type="button" class="btn btn-primary btn-sm" @onclick="() => Navigate(basket)">
                                <span class="oi oi-pencil"></span>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

}
else if (_baskets is {Count: 0})
{
    <h3>No baskets found.</h3>

}
else
{
    <h3>Loading....</h3>
}

<div class="row">
    <div class="col-3">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Basket name..." aria-label="Basket name" aria-describedby="basic-addon2" @bind="_basketName">
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" @onclick="AddBasket">CREATE</button>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <label class="small" style="padding-left: 17px; color: indianred">@_error</label>
</div>

@code {

    private string _basketName;
    private string _error;

    private List<string> _baskets;

    private string PantryId() => _configuration["PantryId"];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await _pantryClient.Pantries.GetPantry(PantryId());
            _baskets = response.Baskets;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task AddBasket()
    {
        if (string.IsNullOrWhiteSpace(_basketName))
        {
            _error = "Provide a basket name please.";
            return;
        }

        var obj = new SampleContent("ciao", "ciccio");

        await _pantryClient.Baskets.CreateBasket(PantryId(), _basketName, obj);

        if (_baskets is null)
            _baskets = new List<string>(new[] {_basketName});
        else
            _baskets.Add(_basketName);

        _basketName = _error = string.Empty;
    }

    private async Task DeleteBasket(string name)
    {
        await _pantryClient.Baskets.DeleteBasket(PantryId(), name);
        _baskets.Remove(name);
    }

    private void Navigate(string basket)
    {
        _uriHelper.NavigateTo($"/basket/{basket}");
    }
}
