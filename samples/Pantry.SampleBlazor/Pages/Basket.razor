@page "/Basket/{id}"

@using Microsoft.Extensions.Configuration
@using Pantry.Core
@using System.Text.Json
@inject IConfiguration _configuration;
@inject IPantryClient _pantryClient

<h3>Basket: @Id</h3>

@if (_serializedContent is { Length: >0 })
{
    <textarea class="form-control mb-3" rows="10" @bind="_serializedContent"></textarea>
    <div class="row">
        <div class="col-3">
            <div class="input-group mb-3">
                <button class="btn btn-outline-secondary" type="button" @onclick="UpdateBasket">UPDATE</button>
            </div>
        </div>
    </div>
    <div class="row">
        <label class="small" style="padding-left: 17px;">@_message</label>
    </div>
}
else
{
    <h3>Loading....</h3>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private string _serializedContent;

    private string _message;

    private string PantryId() => _configuration["PantryId"];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var content = await _pantryClient.Baskets.Get<SampleContent>(PantryId(), Id);
            _serializedContent = JsonSerializer.Serialize(content, new JsonSerializerOptions { WriteIndented = true });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task UpdateBasket()
    {
        if (string.IsNullOrWhiteSpace(_serializedContent))
        {
            _message = $"{nameof(_serializedContent)} is empty.";
            return;
        }

        try
        {
            var json = await _pantryClient.Baskets.Update(PantryId(), Id, JsonSerializer.Deserialize<SampleContent>(_serializedContent));
            _serializedContent = JsonSerializer.Serialize(json, new JsonSerializerOptions { WriteIndented = true });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            _message = ex.Message;
            return;
        }
        _message = "Success!";
    }
}
